{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createContext, useState } from 'react';\nimport jsTPS, { jsTPS_Transaction } from '../common/jsTPS';\nimport api from '../api';\nimport AddSong_Transaction from '../Transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../Transactions/DeleteSong_Transaction';\nimport MoveSong_Transaction from '../Transactions/MoveSong_Transaction';\nimport EditSong_Transaction from '../Transactions/EditSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\n  CLOSE_CURRENT_LIST: 'CLOSE_CURRENT_LIST',\n  CREATE_NEW_LIST: 'CREATE_NEW_LIST',\n  LOAD_ID_NAME_PAIRS: 'LOAD_ID_NAME_PAIRS',\n  SET_CURRENT_LIST: 'SET_CURRENT_LIST',\n  SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\n  SELECT_LIST_TO_DELETE: 'SELECT_LIST_TO_DELETE',\n  SELECT_SONG: 'SELECT_SONG'\n};\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\nexport const useGlobalStore = () => {\n  _s();\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    selectedListId: '',\n    selectedSongIndex: -1,\n    selectedSong: {\n      title: '',\n      artist: '',\n      youTubeId: ''\n    }\n  });\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n    switch (type) {\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            selectedListId: '',\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.SELECT_LIST_TO_DELETE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: payload,\n            selectedSongIndex: -1,\n            selectedSong: {\n              title: '',\n              artist: '',\n              youTubeId: ''\n            }\n          });\n        }\n      case GlobalStoreActionType.SELECT_SONG:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            selectedListId: '',\n            selectedSongIndex: payload.index,\n            selectedSong: payload.song\n          });\n        }\n      default:\n        return store;\n    }\n  };\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n            getListPairs(playlist);\n          }\n        }\n        updateList(playlist);\n      }\n    }\n    asyncChangeListName(id);\n  };\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n    tps.clearAllTransactions();\n  };\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log('API FAILED TO GET THE LIST PAIRS');\n      }\n    }\n    asyncLoadIdNamePairs();\n  };\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push('/playlist/' + playlist._id);\n        }\n      }\n    }\n    asyncSetCurrentList(id);\n  };\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n  store.redo = function () {\n    tps.doTransaction();\n  };\n  store.canUndo = () => {\n    return tps.hasTransactionToUndo();\n  };\n  store.canRedo = () => {\n    return tps.hasTransactionToRedo();\n  };\n  store.hasCurrentList = () => {\n    return store.currentList !== null;\n  };\n  store.getPlaylistNameById = id => {\n    const idNamePairs = store.idNamePairs;\n    const name = idNamePairs.filter(item => {\n      return item._id === id;\n    })[0].name;\n    return name;\n  };\n  store.setListNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n  store.createNewList = () => {\n    const playlist = {\n      name: 'untitled',\n      songs: []\n    };\n    const asyncCreateNewList = async () => {\n      const response = await api.createPlaylist(playlist);\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push('/playlist/' + playlist._id);\n        }\n      }\n    };\n    asyncCreateNewList();\n  };\n  store.selectListToDelete = id => {\n    storeReducer({\n      type: GlobalStoreActionType.SELECT_LIST_TO_DELETE,\n      payload: id\n    });\n  };\n  store.deletePlaylist = id => {\n    async function asyncDeletePlaylist(id) {\n      let response = await api.getPlaylistById(id);\n      let playlist = response.data.playlist;\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n          payload: {}\n        });\n        async function deleteList(playlist) {\n          response = await api.deletePlaylistById(playlist._id);\n          store.loadIdNamePairs();\n        }\n        deleteList(playlist);\n      }\n    }\n    asyncDeletePlaylist(id);\n  };\n  store.moveSong = (start, end) => {\n    const list = store.currentList;\n    if (start < end) {\n      let temp = list.songs[start];\n      for (let i = start; i < end; i++) {\n        list.songs[i] = list.songs[i + 1];\n      }\n      list.songs[end] = temp;\n    } else if (start > end) {\n      let temp = list.songs[start];\n      for (let i = start; i > end; i--) {\n        list.songs[i] = list.songs[i - 1];\n      }\n      list.songs[end] = temp;\n    }\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: list\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  store.addMoveSongTransaction = (initOldSongIndex, initNewSongIndex) => {\n    const transaction = new MoveSong_Transaction(store, initOldSongIndex, initNewSongIndex);\n    tps.addTransaction(transaction);\n  };\n  store.selectSong = index => {\n    const song = store.currentList.songs[index];\n    storeReducer({\n      type: GlobalStoreActionType.SELECT_SONG,\n      payload: {\n        index: index,\n        song: song\n      }\n    });\n  };\n  store.deleteSong = index => {\n    const list = store.currentList;\n    const removedSong = list.songs.splice(index, 1)[0];\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: list\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n    return removedSong;\n  };\n  store.addDeleteSongTransaction = index => {\n    let transaction = new DeleteSong_Transaction(store, index);\n    tps.addTransaction(transaction);\n  };\n  store.addSong = (songIdx, song) => {\n    const list = store.currentList;\n    if (store.selectedSongIndex !== -1) list.songs.splice(songIdx, 0, song);else list.songs.push(song);\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: list\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  store.addAddSongTransaction = () => {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n  store.editSong = (songIdx, editedSong) => {\n    const list = store.currentList;\n    let song = list.songs[songIdx];\n    song.title = editedSong.title;\n    song.artist = editedSong.artist;\n    song.youTubeId = editedSong.youTubeId;\n    async function asyncUpdatePlaylist(playlist) {\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: list\n        });\n      }\n    }\n    asyncUpdatePlaylist(list);\n  };\n  store.addEditSongTransaction = editedSong => {\n    const uneditedSong = store.currentList.songs[store.selectedSongIndex];\n    const uneditedSongClone = {\n      title: uneditedSong.title,\n      artist: uneditedSong.artist,\n      youTubeId: uneditedSong.youTubeId\n    };\n    const transaction = new EditSong_Transaction(store, store.selectedSongIndex, uneditedSongClone, editedSong);\n    tps.addTransaction(transaction);\n  };\n  return {\n    store,\n    storeReducer\n  };\n};\n_s(useGlobalStore, \"nJIn3sWjQoez7sU+AOwZXLEiM48=\");","map":{"version":3,"names":["createContext","useState","jsTPS","jsTPS_Transaction","api","AddSong_Transaction","DeleteSong_Transaction","MoveSong_Transaction","EditSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SELECT_LIST_TO_DELETE","SELECT_SONG","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","selectedListId","selectedSongIndex","selectedSong","title","artist","youTubeId","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","index","song","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","clearAllTransactions","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","canUndo","hasTransactionToUndo","canRedo","hasTransactionToRedo","hasCurrentList","getPlaylistNameById","filter","item","setListNameActive","createNewList","asyncCreateNewList","createPlaylist","selectListToDelete","deletePlaylist","asyncDeletePlaylist","deleteList","deletePlaylistById","moveSong","start","end","list","temp","i","asyncUpdatePlaylist","addMoveSongTransaction","initOldSongIndex","initNewSongIndex","transaction","addTransaction","selectSong","deleteSong","removedSong","splice","addDeleteSongTransaction","addSong","songIdx","addAddSongTransaction","editSong","editedSong","addEditSongTransaction","uneditedSong","uneditedSongClone"],"sources":["C:/Users/yolos/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react';\r\nimport jsTPS, { jsTPS_Transaction } from '../common/jsTPS';\r\nimport api from '../api';\r\nimport AddSong_Transaction from '../Transactions/AddSong_Transaction';\r\nimport DeleteSong_Transaction from '../Transactions/DeleteSong_Transaction';\r\nimport MoveSong_Transaction from '../Transactions/MoveSong_Transaction';\r\nimport EditSong_Transaction from '../Transactions/EditSong_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\r\n    CLOSE_CURRENT_LIST: 'CLOSE_CURRENT_LIST',\r\n    CREATE_NEW_LIST: 'CREATE_NEW_LIST',\r\n    LOAD_ID_NAME_PAIRS: 'LOAD_ID_NAME_PAIRS',\r\n    SET_CURRENT_LIST: 'SET_CURRENT_LIST',\r\n    SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\r\n    SELECT_LIST_TO_DELETE: 'SELECT_LIST_TO_DELETE',\r\n    SELECT_SONG: 'SELECT_SONG',\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\nexport const useGlobalStore = () => {\r\n\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        selectedListId: '',\r\n        selectedSongIndex: -1,\r\n        selectedSong: { title: '', artist: '', youTubeId: '' },\r\n    });\r\n\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SELECT_LIST_TO_DELETE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: payload,\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n            case GlobalStoreActionType.SELECT_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: payload.index,\r\n                    selectedSong: payload.song,\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    };\r\n\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist,\r\n                                    },\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    };\r\n\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {},\r\n        });\r\n        tps.clearAllTransactions();\r\n    };\r\n\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray,\r\n                });\r\n            } else {\r\n                console.log('API FAILED TO GET THE LIST PAIRS');\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    };\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist,\r\n                    });\r\n                    store.history.push('/playlist/' + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    };\r\n    store.getPlaylistSize = function () {\r\n        return store.currentList.songs.length;\r\n    };\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    };\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    };\r\n\r\n    store.canUndo = () => {\r\n        return tps.hasTransactionToUndo();\r\n    };\r\n    store.canRedo = () => {\r\n        return tps.hasTransactionToRedo();\r\n    };\r\n    store.hasCurrentList = () => {\r\n        return store.currentList !== null;\r\n    };\r\n    store.getPlaylistNameById = (id) => {\r\n        const idNamePairs = store.idNamePairs;\r\n        const name = idNamePairs.filter((item) => {\r\n            return item._id === id;\r\n        })[0].name;\r\n        return name;\r\n    };\r\n\r\n    store.setListNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null,\r\n        });\r\n    };\r\n\r\n    store.createNewList = () => {\r\n        const playlist = { name: 'untitled', songs: [] };\r\n        const asyncCreateNewList = async () => {\r\n            const response = await api.createPlaylist(playlist);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist,\r\n                    });\r\n                    store.history.push('/playlist/' + playlist._id);\r\n                }\r\n            }\r\n        };\r\n        asyncCreateNewList();\r\n    };\r\n\r\n    store.selectListToDelete = (id) => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SELECT_LIST_TO_DELETE,\r\n            payload: id,\r\n        });\r\n    };\r\n\r\n    store.deletePlaylist = (id) => {\r\n        async function asyncDeletePlaylist(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            let playlist = response.data.playlist;\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                    payload: {},\r\n                });\r\n                async function deleteList(playlist) {\r\n                    response = await api.deletePlaylistById(playlist._id);\r\n                    store.loadIdNamePairs();\r\n                }\r\n                deleteList(playlist);\r\n            }\r\n        }\r\n        asyncDeletePlaylist(id);\r\n    };\r\n\r\n    store.moveSong = (start, end) => {\r\n        const list = store.currentList;\r\n        if (start < end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i < end; i++) {\r\n                list.songs[i] = list.songs[i + 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        } else if (start > end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i > end; i--) {\r\n                list.songs[i] = list.songs[i - 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        }\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n\r\n        asyncUpdatePlaylist(list);\r\n    };\r\n\r\n    store.addMoveSongTransaction = (initOldSongIndex, initNewSongIndex) => {\r\n        const transaction = new MoveSong_Transaction(\r\n            store,\r\n            initOldSongIndex,\r\n            initNewSongIndex\r\n        );\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    store.selectSong = (index) => {\r\n        const song = store.currentList.songs[index];\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SELECT_SONG,\r\n            payload: { index: index, song: song },\r\n        });\r\n    };\r\n\r\n    store.deleteSong = (index) => {\r\n        const list = store.currentList;\r\n        const removedSong = list.songs.splice(index, 1)[0];\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n\r\n        asyncUpdatePlaylist(list);\r\n        return removedSong;\r\n    };\r\n\r\n    store.addDeleteSongTransaction = (index) => {\r\n        let transaction = new DeleteSong_Transaction(store, index);\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    store.addSong = (songIdx, song) => {\r\n        const list = store.currentList;\r\n        if (store.selectedSongIndex !== -1) list.songs.splice(songIdx, 0, song);\r\n        else list.songs.push(song);\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n\r\n        asyncUpdatePlaylist(list);\r\n    };\r\n\r\n    store.addAddSongTransaction = () => {\r\n        let transaction = new AddSong_Transaction(store);\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    store.editSong = (songIdx, editedSong) => {\r\n        const list = store.currentList;\r\n        let song = list.songs[songIdx];\r\n        song.title = editedSong.title;\r\n        song.artist = editedSong.artist;\r\n        song.youTubeId = editedSong.youTubeId;\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n        asyncUpdatePlaylist(list);\r\n    };\r\n\r\n    store.addEditSongTransaction = (editedSong) => {\r\n        const uneditedSong = store.currentList.songs[store.selectedSongIndex];\r\n        const uneditedSongClone = {\r\n            title: uneditedSong.title,\r\n            artist: uneditedSong.artist,\r\n            youTubeId: uneditedSong.youTubeId,\r\n        };\r\n        const transaction = new EditSong_Transaction(\r\n            store,\r\n            store.selectedSongIndex,\r\n            uneditedSongClone,\r\n            editedSong\r\n        );\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    return { store, storeReducer };\r\n};\r\n"],"mappings":";AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,KAAK,IAAIC,iBAAiB,QAAQ,iBAAiB;AAC1D,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,mBAAmB,MAAM,qCAAqC;AACrE,OAAOC,sBAAsB,MAAM,wCAAwC;AAC3E,OAAOC,oBAAoB,MAAM,sCAAsC;AACvE,OAAOC,oBAAoB,MAAM,sCAAsC;AACvE,OAAO,MAAMC,kBAAkB,gBAAGT,aAAa,CAAC,CAAC,CAAC,CAAC;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,MAAMU,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBAAkB;EACpCC,kBAAkB,EAAE,oBAAoB;EACxCC,eAAe,EAAE,iBAAiB;EAClCC,kBAAkB,EAAE,oBAAoB;EACxCC,gBAAgB,EAAE,kBAAkB;EACpCC,yBAAyB,EAAE,2BAA2B;EACtDC,qBAAqB,EAAE,uBAAuB;EAC9CC,WAAW,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAG,IAAIjB,KAAK,EAAE;AAEvB,OAAO,MAAMkB,cAAc,GAAG,MAAM;EAAA;EAEhC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC;IAC/BsB,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE,IAAI;IACjBC,cAAc,EAAE,CAAC;IACjBC,cAAc,EAAE,KAAK;IACrBC,cAAc,EAAE,EAAE;IAClBC,iBAAiB,EAAE,CAAC,CAAC;IACrBC,YAAY,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,SAAS,EAAE;IAAG;EACzD,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAIC,MAAM,IAAK;IAC7B,MAAM;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGF,MAAM;IAChC,QAAQC,IAAI;MAER,KAAKzB,qBAAqB,CAACC,gBAAgB;QAAE;UACzC,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAEa,OAAO,CAACb,WAAW;YAChCC,WAAW,EAAEY,OAAO,CAACC,QAAQ;YAC7BZ,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAACE,kBAAkB;QAAE;UAC3C,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAE,IAAI;YACjBC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAACG,eAAe;QAAE;UACxC,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAEY,OAAO;YACpBX,cAAc,EAAEJ,KAAK,CAACI,cAAc,GAAG,CAAC;YACxCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAACI,kBAAkB;QAAE;UAC3C,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAEa,OAAO;YACpBZ,WAAW,EAAE,IAAI;YACjBC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAAC4B,sBAAsB;QAAE;UAC/C,OAAOhB,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAE,IAAI;YACjBC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAACK,gBAAgB;QAAE;UACzC,OAAOO,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAEY,OAAO;YACpBX,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAACM,yBAAyB;QAAE;UAClD,OAAOM,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAEY,OAAO;YACpBX,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,IAAI;YACpBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MAEA,KAAKtB,qBAAqB,CAACO,qBAAqB;QAAE;UAC9C,OAAOK,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAE,IAAI;YACjBC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAES,OAAO;YACvBR,iBAAiB,EAAE,CAAC,CAAC;YACrBC,YAAY,EAAE;cAAEC,KAAK,EAAE,EAAE;cAAEC,MAAM,EAAE,EAAE;cAAEC,SAAS,EAAE;YAAG;UACzD,CAAC,CAAC;QACN;MACA,KAAKtB,qBAAqB,CAACQ,WAAW;QAAE;UACpC,OAAOI,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WAAW;YAC9BC,WAAW,EAAEH,KAAK,CAACG,WAAW;YAC9BC,cAAc,EAAEJ,KAAK,CAACI,cAAc;YACpCC,cAAc,EAAE,KAAK;YACrBC,cAAc,EAAE,EAAE;YAClBC,iBAAiB,EAAEQ,OAAO,CAACG,KAAK;YAChCV,YAAY,EAAEO,OAAO,CAACI;UAC1B,CAAC,CAAC;QACN;MACA;QACI,OAAOnB,KAAK;IAAC;EAEzB,CAAC;EAEDA,KAAK,CAACoB,cAAc,GAAG,UAAUC,EAAE,EAAEC,OAAO,EAAE;IAC1C;IACA,eAAeC,mBAAmB,CAACF,EAAE,EAAE;MACnC,IAAIG,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACJ,EAAE,CAAC;MAC5C,IAAIG,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIX,QAAQ,GAAGQ,QAAQ,CAACE,IAAI,CAACV,QAAQ;QACrCA,QAAQ,CAACY,IAAI,GAAGN,OAAO;QACvB,eAAeO,UAAU,CAACb,QAAQ,EAAE;UAChCQ,QAAQ,GAAG,MAAMzC,GAAG,CAAC+C,kBAAkB,CAACd,QAAQ,CAACe,GAAG,EAAEf,QAAQ,CAAC;UAC/D,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;YACvB,eAAeK,YAAY,CAAChB,QAAQ,EAAE;cAClCQ,QAAQ,GAAG,MAAMzC,GAAG,CAACkD,gBAAgB,EAAE;cACvC,IAAIT,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;gBACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAI,CAACxB,WAAW;gBAC1CU,YAAY,CAAC;kBACTE,IAAI,EAAEzB,qBAAqB,CAACC,gBAAgB;kBAC5CyB,OAAO,EAAE;oBACLb,WAAW,EAAEgC,UAAU;oBACvBlB,QAAQ,EAAEA;kBACd;gBACJ,CAAC,CAAC;cACN;YACJ;YACAgB,YAAY,CAAChB,QAAQ,CAAC;UAC1B;QACJ;QACAa,UAAU,CAACb,QAAQ,CAAC;MACxB;IACJ;IACAO,mBAAmB,CAACF,EAAE,CAAC;EAC3B,CAAC;EAEDrB,KAAK,CAACmC,gBAAgB,GAAG,YAAY;IACjCvB,YAAY,CAAC;MACTE,IAAI,EAAEzB,qBAAqB,CAACE,kBAAkB;MAC9CwB,OAAO,EAAE,CAAC;IACd,CAAC,CAAC;IACFjB,GAAG,CAACsC,oBAAoB,EAAE;EAC9B,CAAC;EAEDpC,KAAK,CAACqC,eAAe,GAAG,YAAY;IAChC,eAAeC,oBAAoB,GAAG;MAClC,MAAMd,QAAQ,GAAG,MAAMzC,GAAG,CAACkD,gBAAgB,EAAE;MAC7C,IAAIT,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIO,UAAU,GAAGV,QAAQ,CAACE,IAAI,CAACxB,WAAW;QAC1CU,YAAY,CAAC;UACTE,IAAI,EAAEzB,qBAAqB,CAACI,kBAAkB;UAC9CsB,OAAO,EAAEmB;QACb,CAAC,CAAC;MACN,CAAC,MAAM;QACHK,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MACnD;IACJ;IACAF,oBAAoB,EAAE;EAC1B,CAAC;EAEDtC,KAAK,CAACyC,cAAc,GAAG,UAAUpB,EAAE,EAAE;IACjC,eAAeqB,mBAAmB,CAACrB,EAAE,EAAE;MACnC,IAAIG,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACJ,EAAE,CAAC;MAC5C,IAAIG,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIX,QAAQ,GAAGQ,QAAQ,CAACE,IAAI,CAACV,QAAQ;QAErC,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;UACvBf,YAAY,CAAC;YACTE,IAAI,EAAEzB,qBAAqB,CAACK,gBAAgB;YAC5CqB,OAAO,EAAEC;UACb,CAAC,CAAC;UACFhB,KAAK,CAAC2C,OAAO,CAACC,IAAI,CAAC,YAAY,GAAG5B,QAAQ,CAACe,GAAG,CAAC;QACnD;MACJ;IACJ;IACAW,mBAAmB,CAACrB,EAAE,CAAC;EAC3B,CAAC;EACDrB,KAAK,CAAC6C,eAAe,GAAG,YAAY;IAChC,OAAO7C,KAAK,CAACG,WAAW,CAAC2C,KAAK,CAACC,MAAM;EACzC,CAAC;EACD/C,KAAK,CAACgD,IAAI,GAAG,YAAY;IACrBlD,GAAG,CAACmD,eAAe,EAAE;EACzB,CAAC;EACDjD,KAAK,CAACkD,IAAI,GAAG,YAAY;IACrBpD,GAAG,CAACqD,aAAa,EAAE;EACvB,CAAC;EAEDnD,KAAK,CAACoD,OAAO,GAAG,MAAM;IAClB,OAAOtD,GAAG,CAACuD,oBAAoB,EAAE;EACrC,CAAC;EACDrD,KAAK,CAACsD,OAAO,GAAG,MAAM;IAClB,OAAOxD,GAAG,CAACyD,oBAAoB,EAAE;EACrC,CAAC;EACDvD,KAAK,CAACwD,cAAc,GAAG,MAAM;IACzB,OAAOxD,KAAK,CAACG,WAAW,KAAK,IAAI;EACrC,CAAC;EACDH,KAAK,CAACyD,mBAAmB,GAAIpC,EAAE,IAAK;IAChC,MAAMnB,WAAW,GAAGF,KAAK,CAACE,WAAW;IACrC,MAAM0B,IAAI,GAAG1B,WAAW,CAACwD,MAAM,CAAEC,IAAI,IAAK;MACtC,OAAOA,IAAI,CAAC5B,GAAG,KAAKV,EAAE;IAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAACO,IAAI;IACV,OAAOA,IAAI;EACf,CAAC;EAED5B,KAAK,CAAC4D,iBAAiB,GAAG,YAAY;IAClChD,YAAY,CAAC;MACTE,IAAI,EAAEzB,qBAAqB,CAACM,yBAAyB;MACrDoB,OAAO,EAAE;IACb,CAAC,CAAC;EACN,CAAC;EAEDf,KAAK,CAAC6D,aAAa,GAAG,MAAM;IACxB,MAAM7C,QAAQ,GAAG;MAAEY,IAAI,EAAE,UAAU;MAAEkB,KAAK,EAAE;IAAG,CAAC;IAChD,MAAMgB,kBAAkB,GAAG,YAAY;MACnC,MAAMtC,QAAQ,GAAG,MAAMzC,GAAG,CAACgF,cAAc,CAAC/C,QAAQ,CAAC;MACnD,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvB,IAAIX,QAAQ,GAAGQ,QAAQ,CAACE,IAAI,CAACV,QAAQ;QAErC,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;UACvBf,YAAY,CAAC;YACTE,IAAI,EAAEzB,qBAAqB,CAACK,gBAAgB;YAC5CqB,OAAO,EAAEC;UACb,CAAC,CAAC;UACFhB,KAAK,CAAC2C,OAAO,CAACC,IAAI,CAAC,YAAY,GAAG5B,QAAQ,CAACe,GAAG,CAAC;QACnD;MACJ;IACJ,CAAC;IACD+B,kBAAkB,EAAE;EACxB,CAAC;EAED9D,KAAK,CAACgE,kBAAkB,GAAI3C,EAAE,IAAK;IAC/BT,YAAY,CAAC;MACTE,IAAI,EAAEzB,qBAAqB,CAACO,qBAAqB;MACjDmB,OAAO,EAAEM;IACb,CAAC,CAAC;EACN,CAAC;EAEDrB,KAAK,CAACiE,cAAc,GAAI5C,EAAE,IAAK;IAC3B,eAAe6C,mBAAmB,CAAC7C,EAAE,EAAE;MACnC,IAAIG,QAAQ,GAAG,MAAMzC,GAAG,CAAC0C,eAAe,CAACJ,EAAE,CAAC;MAC5C,IAAIL,QAAQ,GAAGQ,QAAQ,CAACE,IAAI,CAACV,QAAQ;MACrC,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvBf,YAAY,CAAC;UACTE,IAAI,EAAEzB,qBAAqB,CAAC4B,sBAAsB;UAClDF,OAAO,EAAE,CAAC;QACd,CAAC,CAAC;QACF,eAAeoD,UAAU,CAACnD,QAAQ,EAAE;UAChCQ,QAAQ,GAAG,MAAMzC,GAAG,CAACqF,kBAAkB,CAACpD,QAAQ,CAACe,GAAG,CAAC;UACrD/B,KAAK,CAACqC,eAAe,EAAE;QAC3B;QACA8B,UAAU,CAACnD,QAAQ,CAAC;MACxB;IACJ;IACAkD,mBAAmB,CAAC7C,EAAE,CAAC;EAC3B,CAAC;EAEDrB,KAAK,CAACqE,QAAQ,GAAG,CAACC,KAAK,EAAEC,GAAG,KAAK;IAC7B,MAAMC,IAAI,GAAGxE,KAAK,CAACG,WAAW;IAC9B,IAAImE,KAAK,GAAGC,GAAG,EAAE;MACb,IAAIE,IAAI,GAAGD,IAAI,CAAC1B,KAAK,CAACwB,KAAK,CAAC;MAC5B,KAAK,IAAII,CAAC,GAAGJ,KAAK,EAAEI,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;QAC9BF,IAAI,CAAC1B,KAAK,CAAC4B,CAAC,CAAC,GAAGF,IAAI,CAAC1B,KAAK,CAAC4B,CAAC,GAAG,CAAC,CAAC;MACrC;MACAF,IAAI,CAAC1B,KAAK,CAACyB,GAAG,CAAC,GAAGE,IAAI;IAC1B,CAAC,MAAM,IAAIH,KAAK,GAAGC,GAAG,EAAE;MACpB,IAAIE,IAAI,GAAGD,IAAI,CAAC1B,KAAK,CAACwB,KAAK,CAAC;MAC5B,KAAK,IAAII,CAAC,GAAGJ,KAAK,EAAEI,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;QAC9BF,IAAI,CAAC1B,KAAK,CAAC4B,CAAC,CAAC,GAAGF,IAAI,CAAC1B,KAAK,CAAC4B,CAAC,GAAG,CAAC,CAAC;MACrC;MACAF,IAAI,CAAC1B,KAAK,CAACyB,GAAG,CAAC,GAAGE,IAAI;IAC1B;IACA,eAAeE,mBAAmB,CAAC3D,QAAQ,EAAE;MACzC,IAAIQ,QAAQ,GAAG,MAAMzC,GAAG,CAAC+C,kBAAkB,CAACd,QAAQ,CAACe,GAAG,EAAEf,QAAQ,CAAC;MACnE,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvBf,YAAY,CAAC;UACTE,IAAI,EAAEzB,qBAAqB,CAACK,gBAAgB;UAC5CqB,OAAO,EAAEyD;QACb,CAAC,CAAC;MACN;IACJ;IAEAG,mBAAmB,CAACH,IAAI,CAAC;EAC7B,CAAC;EAEDxE,KAAK,CAAC4E,sBAAsB,GAAG,CAACC,gBAAgB,EAAEC,gBAAgB,KAAK;IACnE,MAAMC,WAAW,GAAG,IAAI7F,oBAAoB,CACxCc,KAAK,EACL6E,gBAAgB,EAChBC,gBAAgB,CACnB;IACDhF,GAAG,CAACkF,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EAED/E,KAAK,CAACiF,UAAU,GAAI/D,KAAK,IAAK;IAC1B,MAAMC,IAAI,GAAGnB,KAAK,CAACG,WAAW,CAAC2C,KAAK,CAAC5B,KAAK,CAAC;IAC3CN,YAAY,CAAC;MACTE,IAAI,EAAEzB,qBAAqB,CAACQ,WAAW;MACvCkB,OAAO,EAAE;QAAEG,KAAK,EAAEA,KAAK;QAAEC,IAAI,EAAEA;MAAK;IACxC,CAAC,CAAC;EACN,CAAC;EAEDnB,KAAK,CAACkF,UAAU,GAAIhE,KAAK,IAAK;IAC1B,MAAMsD,IAAI,GAAGxE,KAAK,CAACG,WAAW;IAC9B,MAAMgF,WAAW,GAAGX,IAAI,CAAC1B,KAAK,CAACsC,MAAM,CAAClE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,eAAeyD,mBAAmB,CAAC3D,QAAQ,EAAE;MACzC,IAAIQ,QAAQ,GAAG,MAAMzC,GAAG,CAAC+C,kBAAkB,CAACd,QAAQ,CAACe,GAAG,EAAEf,QAAQ,CAAC;MACnE,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvBf,YAAY,CAAC;UACTE,IAAI,EAAEzB,qBAAqB,CAACK,gBAAgB;UAC5CqB,OAAO,EAAEyD;QACb,CAAC,CAAC;MACN;IACJ;IAEAG,mBAAmB,CAACH,IAAI,CAAC;IACzB,OAAOW,WAAW;EACtB,CAAC;EAEDnF,KAAK,CAACqF,wBAAwB,GAAInE,KAAK,IAAK;IACxC,IAAI6D,WAAW,GAAG,IAAI9F,sBAAsB,CAACe,KAAK,EAAEkB,KAAK,CAAC;IAC1DpB,GAAG,CAACkF,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EAED/E,KAAK,CAACsF,OAAO,GAAG,CAACC,OAAO,EAAEpE,IAAI,KAAK;IAC/B,MAAMqD,IAAI,GAAGxE,KAAK,CAACG,WAAW;IAC9B,IAAIH,KAAK,CAACO,iBAAiB,KAAK,CAAC,CAAC,EAAEiE,IAAI,CAAC1B,KAAK,CAACsC,MAAM,CAACG,OAAO,EAAE,CAAC,EAAEpE,IAAI,CAAC,CAAC,KACnEqD,IAAI,CAAC1B,KAAK,CAACF,IAAI,CAACzB,IAAI,CAAC;IAC1B,eAAewD,mBAAmB,CAAC3D,QAAQ,EAAE;MACzC,IAAIQ,QAAQ,GAAG,MAAMzC,GAAG,CAAC+C,kBAAkB,CAACd,QAAQ,CAACe,GAAG,EAAEf,QAAQ,CAAC;MACnE,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvBf,YAAY,CAAC;UACTE,IAAI,EAAEzB,qBAAqB,CAACK,gBAAgB;UAC5CqB,OAAO,EAAEyD;QACb,CAAC,CAAC;MACN;IACJ;IAEAG,mBAAmB,CAACH,IAAI,CAAC;EAC7B,CAAC;EAEDxE,KAAK,CAACwF,qBAAqB,GAAG,MAAM;IAChC,IAAIT,WAAW,GAAG,IAAI/F,mBAAmB,CAACgB,KAAK,CAAC;IAChDF,GAAG,CAACkF,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EAED/E,KAAK,CAACyF,QAAQ,GAAG,CAACF,OAAO,EAAEG,UAAU,KAAK;IACtC,MAAMlB,IAAI,GAAGxE,KAAK,CAACG,WAAW;IAC9B,IAAIgB,IAAI,GAAGqD,IAAI,CAAC1B,KAAK,CAACyC,OAAO,CAAC;IAC9BpE,IAAI,CAACV,KAAK,GAAGiF,UAAU,CAACjF,KAAK;IAC7BU,IAAI,CAACT,MAAM,GAAGgF,UAAU,CAAChF,MAAM;IAC/BS,IAAI,CAACR,SAAS,GAAG+E,UAAU,CAAC/E,SAAS;IACrC,eAAegE,mBAAmB,CAAC3D,QAAQ,EAAE;MACzC,IAAIQ,QAAQ,GAAG,MAAMzC,GAAG,CAAC+C,kBAAkB,CAACd,QAAQ,CAACe,GAAG,EAAEf,QAAQ,CAAC;MACnE,IAAIQ,QAAQ,CAACE,IAAI,CAACC,OAAO,EAAE;QACvBf,YAAY,CAAC;UACTE,IAAI,EAAEzB,qBAAqB,CAACK,gBAAgB;UAC5CqB,OAAO,EAAEyD;QACb,CAAC,CAAC;MACN;IACJ;IACAG,mBAAmB,CAACH,IAAI,CAAC;EAC7B,CAAC;EAEDxE,KAAK,CAAC2F,sBAAsB,GAAID,UAAU,IAAK;IAC3C,MAAME,YAAY,GAAG5F,KAAK,CAACG,WAAW,CAAC2C,KAAK,CAAC9C,KAAK,CAACO,iBAAiB,CAAC;IACrE,MAAMsF,iBAAiB,GAAG;MACtBpF,KAAK,EAAEmF,YAAY,CAACnF,KAAK;MACzBC,MAAM,EAAEkF,YAAY,CAAClF,MAAM;MAC3BC,SAAS,EAAEiF,YAAY,CAACjF;IAC5B,CAAC;IACD,MAAMoE,WAAW,GAAG,IAAI5F,oBAAoB,CACxCa,KAAK,EACLA,KAAK,CAACO,iBAAiB,EACvBsF,iBAAiB,EACjBH,UAAU,CACb;IACD5F,GAAG,CAACkF,cAAc,CAACD,WAAW,CAAC;EACnC,CAAC;EAED,OAAO;IAAE/E,KAAK;IAAEY;EAAa,CAAC;AAClC,CAAC;AAAC,GAnZWb,cAAc"},"metadata":{},"sourceType":"module"}