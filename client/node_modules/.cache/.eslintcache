[{"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\index.js":"1","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\App.js":"2","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\reportWebVitals.js":"3","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\store\\index.js":"4","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\index.js":"5","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\common\\jsTPS.js":"6","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\api\\index.js":"7","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\ListCard.js":"8","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\EditToolbar.js":"9","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\Banner.js":"10","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\ListSelector.js":"11","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\Statusbar.js":"12","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\SongCard.js":"13","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\PlaylistCards.js":"14","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\MoveSong_Transaction.js":"15","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\EditSong_Transaction.js":"16","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\AddSong_Transaction.js":"17","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\DeleteSong_Transaction.js":"18","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\DeleteListModal.js":"19","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\DeleteSongModal.js":"20","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\EditSongModal.js":"21","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\AddSong_Transaction.js":"22","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\EditSong_Transaction.js":"23","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\DeleteSong_Transaction.js":"24","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\MoveSong_Transaction.js":"25"},{"size":908,"mtime":1666124962563,"results":"26","hashOfConfig":"27"},{"size":931,"mtime":1666127951706,"results":"28","hashOfConfig":"27"},{"size":375,"mtime":1666124962564,"results":"29","hashOfConfig":"27"},{"size":15815,"mtime":1666130187887,"results":"30","hashOfConfig":"27"},{"size":579,"mtime":1666124962563,"results":"31","hashOfConfig":"27"},{"size":6687,"mtime":1666124962558,"results":"32","hashOfConfig":"27"},{"size":1541,"mtime":1666125368021,"results":"33","hashOfConfig":"27"},{"size":3589,"mtime":1666126355050,"results":"34","hashOfConfig":"27"},{"size":2030,"mtime":1666126533178,"results":"35","hashOfConfig":"27"},{"size":465,"mtime":1666124962559,"results":"36","hashOfConfig":"27"},{"size":1382,"mtime":1666124962561,"results":"37","hashOfConfig":"27"},{"size":487,"mtime":1666124962562,"results":"38","hashOfConfig":"27"},{"size":2989,"mtime":1666125647388,"results":"39","hashOfConfig":"27"},{"size":868,"mtime":1666124962561,"results":"40","hashOfConfig":"27"},{"size":751,"mtime":1666127252462,"results":"41","hashOfConfig":"27"},{"size":480,"mtime":1666127212221,"results":"42","hashOfConfig":"27"},{"size":555,"mtime":1666127967867,"results":"43","hashOfConfig":"27"},{"size":413,"mtime":1666127106123,"results":"44","hashOfConfig":"27"},{"size":2011,"mtime":1666132073324,"results":"45","hashOfConfig":"27"},{"size":1927,"mtime":1666130185748,"results":"46","hashOfConfig":"27"},{"size":3833,"mtime":1666127624496,"results":"47","hashOfConfig":"27"},{"size":663,"mtime":1666130656931,"results":"48","hashOfConfig":"27"},{"size":681,"mtime":1666130656975,"results":"49","hashOfConfig":"27"},{"size":606,"mtime":1666130656953,"results":"50","hashOfConfig":"27"},{"size":682,"mtime":1666130656996,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"gh4hbx",{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\index.js",[],["107","108"],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\App.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\reportWebVitals.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\store\\index.js",["109"],"import { createContext, useState } from 'react';\r\nimport jsTPS, { jsTPS_Transaction } from '../common/jsTPS';\r\nimport api from '../api';\r\nimport AddSong_Transaction from '../Transactions/AddSong_Transaction';\r\nimport DeleteSong_Transaction from '../Transactions/DeleteSong_Transaction';\r\nimport MoveSong_Transaction from '../Transactions/MoveSong_Transaction';\r\nimport EditSong_Transaction from '../Transactions/EditSong_Transaction';\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: 'CHANGE_LIST_NAME',\r\n    CLOSE_CURRENT_LIST: 'CLOSE_CURRENT_LIST',\r\n    CREATE_NEW_LIST: 'CREATE_NEW_LIST',\r\n    LOAD_ID_NAME_PAIRS: 'LOAD_ID_NAME_PAIRS',\r\n    SET_CURRENT_LIST: 'SET_CURRENT_LIST',\r\n    SET_LIST_NAME_EDIT_ACTIVE: 'SET_LIST_NAME_EDIT_ACTIVE',\r\n    SELECT_LIST_TO_DELETE: 'SELECT_LIST_TO_DELETE',\r\n    SELECT_SONG: 'SELECT_SONG',\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\nexport const useGlobalStore = () => {\r\n\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        selectedListId: '',\r\n        selectedSongIndex: -1,\r\n        selectedSong: { title: '', artist: '', youTubeId: '' },\r\n    });\r\n\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SELECT_LIST_TO_DELETE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: payload,\r\n                    selectedSongIndex: -1,\r\n                    selectedSong: { title: '', artist: '', youTubeId: '' },\r\n                });\r\n            }\r\n            case GlobalStoreActionType.SELECT_SONG: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    selectedListId: '',\r\n                    selectedSongIndex: payload.index,\r\n                    selectedSong: payload.song,\r\n                });\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    };\r\n\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist,\r\n                                    },\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    };\r\n\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {},\r\n        });\r\n        tps.clearAllTransactions();\r\n    };\r\n\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray,\r\n                });\r\n            } else {\r\n                console.log('API FAILED TO GET THE LIST PAIRS');\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    };\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist,\r\n                    });\r\n                    store.history.push('/playlist/' + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    };\r\n    store.getPlaylistSize = function () {\r\n        return store.currentList.songs.length;\r\n    };\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    };\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    };\r\n\r\n    store.canUndo = () => {\r\n        return tps.hasTransactionToUndo();\r\n    };\r\n    store.canRedo = () => {\r\n        return tps.hasTransactionToRedo();\r\n    };\r\n    store.hasCurrentList = () => {\r\n        return store.currentList !== null;\r\n    };\r\n    store.getPlaylistNameById = (id) => {\r\n        const idNamePairs = store.idNamePairs;\r\n        const name = idNamePairs.filter((item) => {\r\n            return item._id === id;\r\n        })[0].name;\r\n        return name;\r\n    };\r\n\r\n    store.setListNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null,\r\n        });\r\n    };\r\n\r\n    store.createNewList = () => {\r\n        const playlist = { name: 'untitled', songs: [] };\r\n        const asyncCreateNewList = async () => {\r\n            const response = await api.createPlaylist(playlist);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist,\r\n                    });\r\n                    store.history.push('/playlist/' + playlist._id);\r\n                }\r\n            }\r\n        };\r\n        asyncCreateNewList();\r\n    };\r\n\r\n    store.selectListToDelete = (id) => {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SELECT_LIST_TO_DELETE,\r\n            payload: id,\r\n        });\r\n    };\r\n\r\n    store.deletePlaylist = (id) => {\r\n        async function asyncDeletePlaylist(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            let playlist = response.data.playlist;\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                    payload: {},\r\n                });\r\n                async function deleteList(playlist) {\r\n                    response = await api.deletePlaylistById(playlist._id);\r\n                    store.loadIdNamePairs();\r\n                }\r\n                deleteList(playlist);\r\n            }\r\n        }\r\n        asyncDeletePlaylist(id);\r\n    };\r\n\r\n    store.moveSong = (start, end) => {\r\n        const list = store.currentList;\r\n        if (start < end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i < end; i++) {\r\n                list.songs[i] = list.songs[i + 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        } else if (start > end) {\r\n            let temp = list.songs[start];\r\n            for (let i = start; i > end; i--) {\r\n                list.songs[i] = list.songs[i - 1];\r\n            }\r\n            list.songs[end] = temp;\r\n        }\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n\r\n        asyncUpdatePlaylist(list);\r\n    };\r\n\r\n    store.addMoveSongTransaction = (initOldSongIndex, initNewSongIndex) => {\r\n        const transaction = new MoveSong_Transaction(\r\n            store,\r\n            initOldSongIndex,\r\n            initNewSongIndex\r\n        );\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    store.selectSong = (index) => {\r\n        const song = store.currentList.songs[index];\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SELECT_SONG,\r\n            payload: { index: index, song: song },\r\n        });\r\n    };\r\n\r\n    store.deleteSong = (index) => {\r\n        const list = store.currentList;\r\n        const removedSong = list.songs.splice(index, 1)[0];\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n\r\n        asyncUpdatePlaylist(list);\r\n        return removedSong;\r\n    };\r\n\r\n    store.addDeleteSongTransaction = (index) => {\r\n        let transaction = new DeleteSong_Transaction(store, index);\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    store.addSong = (songIdx, song) => {\r\n        const list = store.currentList;\r\n        if (store.selectedSongIndex !== -1) list.songs.splice(songIdx, 0, song);\r\n        else list.songs.push(song);\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n\r\n        asyncUpdatePlaylist(list);\r\n    };\r\n\r\n    store.addAddSongTransaction = () => {\r\n        let transaction = new AddSong_Transaction(store);\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    store.editSong = (songIdx, editedSong) => {\r\n        const list = store.currentList;\r\n        let song = list.songs[songIdx];\r\n        song.title = editedSong.title;\r\n        song.artist = editedSong.artist;\r\n        song.youTubeId = editedSong.youTubeId;\r\n        async function asyncUpdatePlaylist(playlist) {\r\n            let response = await api.updatePlaylistById(playlist._id, playlist);\r\n            if (response.data.success) {\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                    payload: list,\r\n                });\r\n            }\r\n        }\r\n        asyncUpdatePlaylist(list);\r\n    };\r\n\r\n    store.addEditSongTransaction = (editedSong) => {\r\n        const uneditedSong = store.currentList.songs[store.selectedSongIndex];\r\n        const uneditedSongClone = {\r\n            title: uneditedSong.title,\r\n            artist: uneditedSong.artist,\r\n            youTubeId: uneditedSong.youTubeId,\r\n        };\r\n        const transaction = new EditSong_Transaction(\r\n            store,\r\n            store.selectedSongIndex,\r\n            uneditedSongClone,\r\n            editedSong\r\n        );\r\n        tps.addTransaction(transaction);\r\n    };\r\n\r\n    return { store, storeReducer };\r\n};\r\n","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\index.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\common\\jsTPS.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\api\\index.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\ListCard.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\EditToolbar.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\Banner.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\ListSelector.js",["110"],"import React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ListCard from './ListCard.js'\r\nimport { GlobalStoreContext } from '../store'\r\n/*\r\n    This React component lists all the playlists in the UI.\r\n    \r\n    @author McKilla Gorilla\r\n*/\r\nconst ListSelector = () => {\r\n    const { store } = useContext(GlobalStoreContext);\r\n    store.history = useHistory();\r\n\r\n    useEffect(() => {\r\n        store.loadIdNamePairs();\r\n    }, []);\r\n\r\n    function handleCreateNewList() {\r\n        store.createNewList();\r\n    }\r\n    let listCard = \"\";\r\n    if (store) {\r\n        listCard = store.idNamePairs.map((pair) => (\r\n            <ListCard\r\n                key={pair._id}\r\n                idNamePair={pair}\r\n                selected={false}\r\n            />\r\n        ))\r\n    }\r\n    return (\r\n        <div id=\"playlist-selector\">\r\n            <div id=\"list-selector-list\">\r\n            <div id=\"playlist-selector-heading\">\r\n                <input\r\n                    type=\"button\"\r\n                    id=\"add-list-button\"\r\n                    onClick={handleCreateNewList}\r\n                    className=\"playlister-button\"\r\n                    value=\"+\" />\r\n                Your Lists\r\n            </div>                {\r\n                    listCard\r\n                }\r\n            </div>\r\n        </div>)\r\n}\r\n\r\nexport default ListSelector;","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\Statusbar.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\SongCard.js",["111","112"],"import React, { useContext, useState } from 'react';\r\nimport { GlobalStoreContext } from '../store';\r\n\r\nfunction SongCard(props) {\r\n    const { store } = useContext(GlobalStoreContext);\r\n    const [isDragging, setIsDragging] = useState(false);\r\n    const [draggedTo, setDraggedTo] = useState(false);\r\n\r\n    const handleDragStart = (event) => {\r\n        event.dataTransfer.setData('song', event.target.id);\r\n        setIsDragging(true);\r\n    };\r\n    const handleDragOver = (event) => {\r\n        event.preventDefault();\r\n        setDraggedTo(true);\r\n    };\r\n    const handleDragEnter = (event) => {\r\n        event.preventDefault();\r\n        setDraggedTo(true);\r\n    };\r\n    const handleDragLeave = (event) => {\r\n        event.preventDefault();\r\n        setDraggedTo(false);\r\n    };\r\n\r\n    const handleDrop = (event) => {\r\n        event.preventDefault();\r\n        let target = event.target;\r\n        let targetId = target.id;\r\n        targetId = targetId.substring(target.id.indexOf('-') + 1);\r\n        let sourceId = event.dataTransfer.getData('song');\r\n        sourceId = sourceId.substring(sourceId.indexOf('-') + 1);\r\n        setIsDragging(false);\r\n        setDraggedTo(false);\r\n        store.addMoveSongTransaction(parseInt(sourceId), parseInt(targetId));\r\n    };\r\n\r\n    const handleDeleteSong = (event) => {\r\n        event.preventDefault();\r\n        const showDeleteSongModal = () => {\r\n            let modal = document.getElementById('delete-song-modal');\r\n            modal.classList.add('is-visible');\r\n        };\r\n        store.selectSong(index);\r\n        showDeleteSongModal();\r\n    };\r\n\r\n    const handleEditSong = (event) => {\r\n        event.preventDefault();\r\n        const showEditSongModal = () => {\r\n            let modal = document.getElementById('edit-song-modal');\r\n            modal.classList.add('is-visible');\r\n        };\r\n        store.selectSong(index);\r\n        showEditSongModal();\r\n    };\r\n\r\n    const { song, index } = props;\r\n    let cardClass = 'list-card unselected-list-card';\r\n    return (\r\n        <div\r\n            key={index}\r\n            id={'song-' + index}\r\n            className={cardClass}\r\n            onDragStart={handleDragStart}\r\n            onDragOver={handleDragOver}\r\n            onDragEnter={handleDragEnter}\r\n            onDragLeave={handleDragLeave}\r\n            onDrop={handleDrop}\r\n            draggable='true'\r\n            onDoubleClick={handleEditSong}\r\n        >\r\n            {index + 1}.\r\n            <a\r\n                id={'song-' + index + '-link'}\r\n                className='song-link'\r\n                href={'https://www.youtube.com/watch?v=' + song.youTubeId}\r\n            >\r\n                {song.title} by {song.artist}\r\n            </a>\r\n            <input\r\n                type='button'\r\n                id={'remove-song-' + index}\r\n                className='list-card-button'\r\n                value={'X'}\r\n                onClick={handleDeleteSong}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SongCard;\r\n","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\PlaylistCards.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\MoveSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\EditSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\AddSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\Transactions\\DeleteSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\DeleteListModal.js",["113"],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\DeleteSongModal.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\components\\EditSongModal.js",["114"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { __RouterContext } from 'react-router';\r\nimport { GlobalStoreContext } from '../store';\r\n\r\nconst EditSongModal = () => {\r\n    const { store } = useContext(GlobalStoreContext);\r\n    const [title, setTitle] = useState('');\r\n    const [artist, setArtist] = useState('');\r\n    const [youTubeId, setYouTubeId] = useState('');\r\n    const hideEditSongModal = () => {\r\n        let modal = document.getElementById('edit-song-modal');\r\n        modal.classList.remove('is-visible');\r\n    };\r\n    const handleEditSong = () => {\r\n        let editedSong = { title: title, artist: artist, youTubeId: youTubeId };\r\n        store.addEditSongTransaction(editedSong);\r\n        setTitle('');\r\n        setArtist('');\r\n        setYouTubeId('');\r\n        hideEditSongModal();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTitle(store.selectedSong.title);\r\n        setArtist(store.selectedSong.artist);\r\n        setYouTubeId(store.selectedSong.youTubeId);\r\n    }, [store.selectedSong]);\r\n\r\n    return (\r\n        <div class='modal' id='edit-song-modal' data-animation='slideInOutLeft'>\r\n            <div class='modal-root' id='verify-edit-song-root'>\r\n                <div class='modal-north'>Edit Song</div>\r\n                <div class='modal-center'>\r\n                    <div class='modal-center-content'>\r\n                        <div class='edit-song-modal-row'>\r\n                            <span class='modal-label'>Title:</span>\r\n                            <input\r\n                                type='text'\r\n                                id='edit-song-title-form'\r\n                                class='modal-form'\r\n                                value={title}\r\n                                placeholder=''\r\n                                onChange={(event) => setTitle(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div class='edit-song-modal-row'>\r\n                            <span class='modal-label'>Artist:</span>\r\n                            <input\r\n                                type='text'\r\n                                id='edit-song-artist-form'\r\n                                class='modal-form'\r\n                                value={artist}\r\n                                placeholder=''\r\n                                onChange={(event) => setArtist(event.target.value)}\r\n                            />\r\n                        </div>\r\n                        <div class='edit-song-modal-row'>\r\n                            <span class='modal-label'>YouTubeId:</span>\r\n                            <input\r\n                                type='text'\r\n                                id='edit-song-youTubeId-form'\r\n                                class='modal-form'\r\n                                value={youTubeId}\r\n                                placeholder=''\r\n                                onChange={(event) => setYouTubeId(event.target.value)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class='modal-south'>\r\n                    <input\r\n                        type='button'\r\n                        id='edit-song-confirm-button'\r\n                        class='modal-button'\r\n                        value='Confirm'\r\n                        onClick={handleEditSong}\r\n                    />\r\n                    <input\r\n                        type='button'\r\n                        id='edit-song-cancel-button'\r\n                        class='modal-button'\r\n                        value='Cancel'\r\n                        onClick={hideEditSongModal}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditSongModal;\r\n","C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\AddSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\EditSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\DeleteSong_Transaction.js",[],"C:\\Users\\yolos\\Playlister_HW3\\client\\src\\transactions\\MoveSong_Transaction.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":17,"nodeType":"121","messageId":"122","endLine":2,"endColumn":34},{"ruleId":"123","severity":1,"message":"124","line":16,"column":8,"nodeType":"125","endLine":16,"endColumn":10,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":6,"column":12,"nodeType":"121","messageId":"122","endLine":6,"endColumn":22},{"ruleId":"119","severity":1,"message":"128","line":7,"column":12,"nodeType":"121","messageId":"122","endLine":7,"endColumn":21},{"ruleId":"123","severity":1,"message":"124","line":20,"column":10,"nodeType":"125","endLine":20,"endColumn":32,"suggestions":"129"},{"ruleId":"119","severity":1,"message":"130","line":2,"column":10,"nodeType":"121","messageId":"122","endLine":2,"endColumn":25},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'jsTPS_Transaction' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["133"],"'isDragging' is assigned a value but never used.","'draggedTo' is assigned a value but never used.",["134"],"'__RouterContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [store]",{"range":"139","text":"140"},"Update the dependencies array to be: [store, store.selectedListId]",{"range":"141","text":"142"},[476,478],"[store]",[734,756],"[store, store.selectedListId]"]